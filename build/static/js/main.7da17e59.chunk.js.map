{"version":3,"sources":["ServerRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["networkUnit","network","toFixed","bytesToSize","bytes","precision","si","kilobyte","megabyte","gigabyte","terabyte","memTips","props","memory_used","memory_total","swap_used","swap_total","Flag","loc","className","toLowerCase","ServerRow","servers","updated","updatedInt","parseInt","updatedTime","time","year","getFullYear","month","getMonth","padStart","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","formatDateTime","Date","justify","gutter","xs","sm","md","lg","intl","get","length","map","server","online","online4","CheckCircleFilled","WarningFilled","host","name","type","location","uptime","replace","network_rx","network_tx","strokeLinecap","strokeWidth","percent","cpu","status","placement","title","parseFloat","hdd_used","hdd_total","showIcon","message","description","require","Header","Content","App","useState","serverData","setServerData","isOnline","setIsOnline","useEffect","fetchData","fetch","then","res","json","data","catch","e","console","log","itv","setInterval","clearInterval","initDone","setInitDone","currentLocale","navigator","language","startsWith","init","locales","style","background","xl","xxl","size","spinning","tip","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7da17e59.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\nimport intl from 'react-intl-universal';\nimport React, { ReactNode } from 'react';\nimport {\n  Row, Col, Progress, Tooltip, Alert,\n} from 'antd';\nimport {\n  CheckCircleFilled,\n  WarningFilled\n} from '@ant-design/icons';\n\ninterface RawData {\n  name: string;\n  type: string;\n  host: string;\n  location: string;\n  online4: boolean;\n  online6: boolean;\n  uptime: string;\n  load: number;\n  'network_rx': number;\n  'network_tx': number;\n  cpu: number;\n  memory_total: number;\n  memory_used: number;\n  'swap_total': number;\n  'swap_used': number;\n  'hdd_total': number;\n  'hdd_used': number;\n  custom?: string;\n}\n\ninterface SergateData {\n  servers?: Array<RawData>;\n  updated?: string;\n}\n\nfunction onlineTag(online: boolean, label: string): React.ReactElement {\n  //return <Tag color={online ? '#86dc3d' : '#FF4949'}>{online ? 'O N' : 'OFF'}</Tag>;\n  return online ? <CheckCircleFilled /> : <WarningFilled />;\n}\n\nfunction transUptime(uptime: string): string {\n  uptime = uptime || '';\n  return uptime.replace(/days|day/, intl.get('DAYS'));\n}\n\nfunction networkUnit(network: number): string {\n  network = network || 0;\n  if (network < 1000) {\n    return `${network.toFixed(0)}B`;\n  } if (network < 1000 * 1000) {\n    return `${(network / 1000).toFixed(0)}K`;\n  }\n  return `${(network / 1000 / 1000).toFixed(0)}M`;\n}\n\nfunction bytesToSize(bytes: number, precision: number = 1, si: number = 0) {\n  const kilobyte = si === 0 ? 1024 : 1000;\n  const megabyte = kilobyte * kilobyte;\n  const gigabyte = megabyte * kilobyte;\n  const terabyte = gigabyte * kilobyte;\n  bytes = bytes || 0;\n  bytes *= 1024;\n  if (bytes >= 0 && bytes < kilobyte) {\n    return `${bytes}B`;\n  }\n\n  if (bytes >= kilobyte && bytes < megabyte) {\n    return `${(bytes / kilobyte).toFixed(precision)}K`;\n  }\n\n  if (bytes >= megabyte && bytes < gigabyte) {\n    return `${(bytes / megabyte).toFixed(precision)}M`;\n  }\n\n  if (bytes >= gigabyte && bytes < terabyte) {\n    return `${(bytes / gigabyte).toFixed(precision)}G`;\n  }\n\n  return `${(bytes / terabyte).toFixed(precision)}T`;\n}\n\nfunction memTips(props: RawData): ReactNode {\n  const {\n    memory_used, memory_total, swap_used, swap_total,\n  } = props;\n  return (\n    <dl>\n      <dt>Memory:</dt>\n      <dd>\n        {bytesToSize(memory_used)}\n        /\n        {bytesToSize(memory_total)}\n      </dd>\n      <dt>Swap:</dt>\n      <dd>\n        {bytesToSize(swap_used)}\n        /\n        {bytesToSize(swap_total)}\n      </dd>\n    </dl>\n  );\n}\n\nfunction formatDateTime(time: Date) {\n  const year = time.getFullYear();\n  const month = (`${time.getMonth() + 1}`).padStart(2, '0');\n  const day = (`${time.getDate()}`).padStart(2, '0');\n  const hour = (`${time.getHours()}`).padStart(2, '0');\n  const minute = (`${time.getMinutes()}`).padStart(2, '0');\n  const second = (`${time.getSeconds()}`).padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\n}\n\ninterface FlagProps {\n  loc: string\n}\nconst Flag: React.FC<FlagProps> = ({ loc }: FlagProps) => (\n  <i className={`flag-icon flag-icon-${loc.toLowerCase()}`} />\n);\n\nconst ServerRow: React.FC<SergateData> = (props: SergateData) => {\n  let { servers, updated } = props;\n\n  servers = servers || [];\n  updated = updated || '0';\n  const updatedInt = parseInt(updated, 10) * 1000;\n  const updatedTime = formatDateTime(new Date(updatedInt));\n\n  return (\n    <div className=\"sergate\">\n      <Row className=\"sr-head\" justify=\"space-around\" gutter={10}>\n        <Col xs={3} sm={3} md={1} lg={1}>Status</Col>\n        <Col xs={5} sm={4} md={2} lg={2}>{intl.get('NAME')}</Col>\n        <Col xs={0} sm={2} md={2} lg={2}>{intl.get('TYPE')}</Col>\n        <Col xs={2} sm={2} md={1} lg={1}>{intl.get('LOC')}</Col>\n        <Col xs={4} sm={4} md={3} lg={2}>{intl.get('UPTIME')}</Col>\n        <Col xs={0} sm={0} md={5} lg={4}>{intl.get('NETWORK')}</Col>\n        <Col xs={3} sm={3} md={3} lg={3}>{intl.get('CPU')}</Col>\n        <Col xs={3} sm={3} md={3} lg={3}>{intl.get('RAM')}</Col>\n        <Col xs={4} sm={3} md={3} lg={3}>{intl.get('HDD')}</Col>\n      </Row>\n      {servers && servers.length > 0 ? servers.map((server) => (\n        <Row key={server.host} className=\"sr-body\" justify=\"space-around\" gutter={10}>\n          <Col xs={3} sm={3} md={1} lg={1}>{onlineTag(server.online4, 'Status')}</Col>\n          <Col xs={5} sm={4} md={2} lg={2}>{server.host || server.name}</Col>\n          <Col xs={0} sm={2} md={2} lg={2}>{server.type}</Col>\n          <Col xs={2} sm={2} md={1} lg={1}><Flag loc={server.location} /></Col>\n          <Col xs={4} sm={4} md={3} lg={2}>{transUptime(server.uptime)}</Col>\n          <Col xs={0} sm={0} md={5} lg={4}>\n            {networkUnit(server.network_rx)}\n            ↓ | ↑\n            {networkUnit(server.network_tx)}\n          </Col>\n          <Col xs={3} sm={3} md={3} lg={3}>\n            <Progress className=\"sg-progress\" strokeLinecap=\"square\" strokeWidth={12} percent={server.cpu} status=\"active\" />\n          </Col>\n          <Col xs={3} sm={3} md={3} lg={3}>\n            <Tooltip placement=\"left\" title={memTips(server)}>\n              <Progress className=\"sg-progress\" strokeLinecap=\"square\" strokeWidth={12} percent={parseFloat(((server.memory_used / server.memory_total) * 100).toFixed(1))} status=\"active\" />\n            </Tooltip>\n          </Col>\n          <Col xs={4} sm={3} md={3} lg={3}>\n            <Tooltip placement=\"left\" title={`${bytesToSize(server.hdd_used * 1024)}/${bytesToSize(server.hdd_total * 1024)}`}>\n              <Progress className=\"sg-progress\" strokeLinecap=\"square\" strokeWidth={12} percent={parseFloat(((server.hdd_used / server.hdd_total) * 100).toFixed(1))} status=\"active\" />\n            </Tooltip>\n          </Col>\n        </Row>\n      )) : (\n        <Alert\n          showIcon\n          type=\"info\"\n          message={intl.get('LOADING')}\n          description={intl.get('WAIT')}\n        />\n      )}\n      {updatedInt > 0 && <Alert className=\"lastUpdated\" type=\"info\" message={intl.get('LAST_UPDATE', { updatedTime })} />}\n    </div>\n  );\n};\n\nexport default ServerRow;\n","import \"./App.css\";\n\nimport intl from \"react-intl-universal\";\nimport React, { useState, useEffect } from \"react\";\nimport { Layout, Row, Col, Spin } from \"antd\";\nimport ServerRow from \"./ServerRow\";\n\nrequire(\"intl/locale-data/jsonp/en.js\");\nrequire(\"intl/locale-data/jsonp/zh.js\");\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n  const [serverData, setServerData] = useState({ servers: [], updated: \"0\" });\n  const [isOnline, setIsOnline] = useState(false);\n  useEffect(() => {\n    const fetchData = () => {\n      fetch(\"json/stats.json\")\n        .then((res) => res.json())\n        .then((data) => {\n          setServerData(data);\n          setIsOnline(true);\n        })\n        .catch((e) => console.log(\"An error occured:\", e));\n    };\n    fetchData();\n    let itv = setInterval(fetchData, 5000);\n    return () => {\n      clearInterval(itv);\n    };\n  }, []);\n\n  const [initDone, setInitDone] = useState(false);\n  let currentLocale = navigator.language || \"en-US\";\n  if (currentLocale === \"zh-TW\" || currentLocale === \"zh-HK\") {\n    currentLocale = \"zh-TW\";\n  } else if (currentLocale.startsWith(\"zh\")) {\n    currentLocale = \"zh-CN\";\n  } else if(currentLocale === \"it-IT\") {\n  \tcurrentLocale = \"it-IT\";\n  } else {\n    currentLocale = \"en-US\";\n  }\n\n  initDone ||\n    fetch(`locales/${currentLocale}.json`)\n      .then((res) => res.json())\n      .then((data) => {\n        return intl.init({\n          currentLocale,\n          locales: {\n            [currentLocale]: data,\n          },\n        });\n      })\n      .then(() => {\n        setInitDone(true);\n      });\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header>\n          <div className=\"logo\">Service Status</div>\n        </Header>\n        <Content style={{ background: \"#FFFFFF\" }}>\n          <Row justify=\"center\">\n            <Col xs={24} sm={23} md={23} lg={22} xl={20} xxl={16}>\n              {initDone ? (\n                <Spin size=\"large\" spinning={!isOnline} tip=\"Loading the current service status!\">\n                  <ServerRow {...serverData} />\n                </Spin>\n              ) : (\n                  <div />\n                )}\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}